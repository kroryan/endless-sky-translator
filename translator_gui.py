#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Interfaz Gr√°fica Mejorada para el Traductor de Endless Sky
GUI con checkboxes/ticks reales, filtrado preciso de archivos traducibles y selecci√≥n intuitiva
"""

import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
import threading
import queue
import os
import sys
from pathlib import Path
import json
import time
import re

# Importar el traductor principal y sistema de traducciones
try:
    from translator import EndlessSkyTranslatorFixed
    from translations import TranslationManager
except ImportError:
    # Si estamos ejecutando desde otro directorio
    sys.path.append(os.path.dirname(os.path.abspath(__file__)))
    from translator import EndlessSkyTranslatorFixed
    from translations import TranslationManager

class FileItem:
    """Representa un archivo o carpeta con estado de checkbox"""
    def __init__(self, name, path, item_type, status, translatable=True, parent=None):
        self.name = name
        self.path = path
        self.item_type = item_type  # 'file', 'folder', 'root'
        self.status = status        # Estado de seguridad
        self.translatable = translatable
        self.selected = tk.BooleanVar()
        self.parent = parent        # Para archivos dentro de carpetas
        self.files = []            # Para carpetas, lista de archivos
        self.expanded = False      # Si la carpeta est√° expandida

class TranslatorGUIImproved:
    def __init__(self, root):
        self.root = root
        # Initialize translation manager
        self.translation_manager = TranslationManager('en')  # Default to English
        
        self.root.title(self.translation_manager.get('window_title'))
        self.root.geometry("1200x800")
        self.root.resizable(True, True)
        
        # Variables
        self.endless_sky_path = tk.StringVar()
        self.target_language = tk.StringVar(value='es')
        self.translator = None
        self.translation_thread = None
        self.translation_queue = queue.Queue()
        self.is_translating = False
        
        # Lista de elementos (archivos y carpetas) con checkboxes
        self.all_items = []  # Lista plana de todos los elementos para facilitar b√∫squedas
        
        # Configuraci√≥n por defecto
        self.config_file = "translator_config.json"
        self.load_config()
        
        # Crear interfaz
        self.create_widgets()
        self.scan_translatable_items()
        
        # Iniciar verificaci√≥n de cola de mensajes
        self.check_queue()
    
    def create_widgets(self):
        """Creates all interface widgets"""
        
        # Main frame with notebook
        self.notebook = ttk.Notebook(self.root)
        self.notebook.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Tab 1: Configuration
        self.config_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.config_frame, text=self.translation_manager.get('config_tab'))
        
        # Tab 2: File selection with checkboxes
        self.selection_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.selection_frame, text=self.translation_manager.get('selection_tab'))
        
        # Tab 3: Translation and Progress
        self.progress_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.progress_frame, text=self.translation_manager.get('translation_tab'))
        
        self.create_config_tab()
        self.create_selection_tab()
        self.create_progress_tab()
    
    def create_config_tab(self):
        """Creates the configuration tab"""
        
        # Title
        title_label = tk.Label(self.config_frame, text=self.translation_manager.get('config_title'), 
                              font=("Arial", 16, "bold"))
        title_label.pack(pady=10)
        
        # Frame for Endless Sky directory
        dir_frame = ttk.LabelFrame(self.config_frame, text=self.translation_manager.get('endless_sky_dir'), padding=10)
        dir_frame.pack(fill=tk.X, padx=20, pady=10)
        
        ttk.Label(dir_frame, text=self.translation_manager.get('select_directory')).pack(anchor=tk.W)
        
        dir_input_frame = ttk.Frame(dir_frame)
        dir_input_frame.pack(fill=tk.X, pady=5)
        
        self.dir_entry = ttk.Entry(dir_input_frame, textvariable=self.endless_sky_path, width=60)
        self.dir_entry.pack(side=tk.LEFT, fill=tk.X, expand=True)
        
        ttk.Button(dir_input_frame, text=self.translation_manager.get('browse_button'), 
                  command=self.browse_directory).pack(side=tk.RIGHT, padx=(5, 0))
        
        # Frame for language
        lang_frame = ttk.LabelFrame(self.config_frame, text=self.translation_manager.get('target_language'), padding=10)
        lang_frame.pack(fill=tk.X, padx=20, pady=10)
        
        languages = [
            ('es', 'Espa√±ol'),
            ('fr', 'Franc√©s'),
            ('de', 'Alem√°n'),
            ('it', 'Italiano'),
            ('pt', 'Portugu√©s'),
            ('ru', 'Ruso'),
            ('zh', 'Chino'),
            ('ja', 'Japon√©s')
        ]
        
        lang_combo = ttk.Combobox(lang_frame, textvariable=self.target_language, 
                                 values=[f"{code} - {name}" for code, name in languages],
                                 state="readonly")
        lang_combo.set("es - Espa√±ol")
        lang_combo.pack(anchor=tk.W)
        
        # Informaci√≥n
        info_frame = ttk.LabelFrame(self.config_frame, text="‚ÑπÔ∏è Informaci√≥n", padding=10)
        info_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
        
        info_text = """
üéØ CARACTER√çSTICAS DE LA VERSI√ìN MEJORADA:
‚Ä¢ ‚òëÔ∏è Checkboxes reales para seleccionar archivos/carpetas
‚Ä¢ üéØ Solo muestra archivos REALMENTE traducibles
‚Ä¢ üõ°Ô∏è Filtrado inteligente que evita archivos peligrosos
‚Ä¢ üìä Indicadores visuales de seguridad por colores
‚Ä¢ üöÄ Traducci√≥n selectiva solo de contenido visible

üõ°Ô∏è SEGURIDAD GARANTIZADA:
‚Ä¢ ‚úÖ VERDE: Archivos completamente seguros (misiones, di√°logos)
‚Ä¢ ‚öôÔ∏è AMARILLO: Archivos especiales (ships, outfits) - solo descripciones  
‚Ä¢ üîí NO SE MUESTRAN: Archivos peligrosos est√°n ocultos

üìã ARCHIVOS QUE SE TRADUCEN:
‚Ä¢ ‚úÖ Misiones y conversaciones (missions, conversations)
‚Ä¢ ‚úÖ Descripciones de naves (ships.txt solo descripciones)
‚Ä¢ ‚úÖ Descripciones de outfits/engines/weapons (solo descriptions)
‚Ä¢ ‚úÖ Interfaz de usuario (_ui)
‚Ä¢ ‚úÖ Comunicaciones y noticias (hail, news)
‚Ä¢ ‚úÖ Di√°logos de planetas (map planets.txt solo descripciones)

‚ùå NUNCA SE TRADUCEN:
‚Ä¢ Nombres t√©cnicos de naves, outfits o sistemas
‚Ä¢ Archivos que afectan el gameplay (fleets, governments)
‚Ä¢ Coordenadas, efectos y datos t√©cnicos
        """
        
        info_label = tk.Label(info_frame, text=info_text, justify=tk.LEFT, 
                             font=("Courier", 9), bg="lightyellow")
        info_label.pack(fill=tk.BOTH, expand=True)
    
    def create_selection_tab(self):
        """Crea la pesta√±a de selecci√≥n con checkboxes reales y estructura expandible"""
        
        # T√≠tulo
        title_label = tk.Label(self.selection_frame, text="‚òëÔ∏è Selecci√≥n Granular de Archivos", 
                              font=("Arial", 16, "bold"))
        title_label.pack(pady=10)
        
        # Frame de botones de selecci√≥n masiva
        button_frame = ttk.Frame(self.selection_frame)
        button_frame.pack(fill=tk.X, padx=20, pady=5)
        
        ttk.Button(button_frame, text="‚òëÔ∏è Seleccionar Todo", 
                  command=self.select_all).pack(side=tk.LEFT, padx=5)
        ttk.Button(button_frame, text="‚òê Deseleccionar Todo", 
                  command=self.deselect_all).pack(side=tk.LEFT, padx=5)
        ttk.Button(button_frame, text="üõ°Ô∏è Solo Seguros", 
                  command=self.select_safe_only).pack(side=tk.LEFT, padx=5)
        ttk.Button(button_frame, text="‚öôÔ∏è Incluir Especiales", 
                  command=self.select_with_special).pack(side=tk.LEFT, padx=5)
        ttk.Button(button_frame, text="ÔøΩ Expandir Todo", 
                  command=self.expand_all_folders).pack(side=tk.LEFT, padx=5)
        ttk.Button(button_frame, text="üìÅ Contraer Todo", 
                  command=self.collapse_all_folders).pack(side=tk.LEFT, padx=5)
        ttk.Button(button_frame, text="üîÑ Actualizar", 
                  command=self.scan_translatable_items).pack(side=tk.RIGHT, padx=5)
        
        # Frame principal con estructura expandible
        main_frame = ttk.Frame(self.selection_frame)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
        
        # Crear frame con scroll para toda la estructura
        self.main_canvas = tk.Canvas(main_frame)
        self.main_scrollbar = ttk.Scrollbar(main_frame, orient="vertical", command=self.main_canvas.yview)
        self.main_scrollable_frame = ttk.Frame(self.main_canvas)
        
        self.main_scrollable_frame.bind(
            "<Configure>",
            lambda e: self.main_canvas.configure(scrollregion=self.main_canvas.bbox("all"))
        )
        
        self.main_canvas.create_window((0, 0), window=self.main_scrollable_frame, anchor="nw")
        self.main_canvas.configure(yscrollcommand=self.main_scrollbar.set)
        
        self.main_canvas.pack(side="left", fill="both", expand=True)
        self.main_scrollbar.pack(side="right", fill="y")
        
        # Informaci√≥n de selecci√≥n
        info_frame = ttk.Frame(self.selection_frame)
        info_frame.pack(fill=tk.X, padx=20, pady=5)
        
        self.selection_info = tk.Label(info_frame, text="Escanea el directorio para ver archivos traducibles", 
                                      font=("Arial", 10), fg="blue")
        self.selection_info.pack()
    
    def create_progress_tab(self):
        """Crea la pesta√±a de progreso y traducci√≥n"""
        
        # T√≠tulo
        title_label = tk.Label(self.progress_frame, text="üöÄ Proceso de Traducci√≥n", 
                              font=("Arial", 16, "bold"))
        title_label.pack(pady=10)
        
        # Frame de estado
        status_frame = ttk.LabelFrame(self.progress_frame, text="üìä Estado Actual", padding=10)
        status_frame.pack(fill=tk.X, padx=20, pady=10)
        
        self.status_label = tk.Label(status_frame, text="‚è∏Ô∏è Listo para traducir", 
                                    font=("Arial", 12, "bold"), fg="blue")
        self.status_label.pack()
        
        # Barra de progreso
        self.progress_bar = ttk.Progressbar(status_frame, mode='determinate')
        self.progress_bar.pack(fill=tk.X, pady=5)
        
        # Frame de log
        log_frame = ttk.LabelFrame(self.progress_frame, text="üìù Log de Traducci√≥n", padding=5)
        log_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
        
        self.log_text = scrolledtext.ScrolledText(log_frame, height=15, font=("Courier", 9))
        self.log_text.pack(fill=tk.BOTH, expand=True)
        
        # Botones de control
        control_frame = ttk.Frame(self.progress_frame)
        control_frame.pack(fill=tk.X, padx=20, pady=10)
        
        self.start_button = ttk.Button(control_frame, text="üöÄ Iniciar Traducci√≥n", 
                                      command=self.start_translation, style="Accent.TButton")
        self.start_button.pack(side=tk.LEFT, padx=5)
        
        self.stop_button = ttk.Button(control_frame, text="‚èπÔ∏è Detener", 
                                     command=self.stop_translation, state="disabled")
        self.stop_button.pack(side=tk.LEFT, padx=5)
        
        ttk.Button(control_frame, text="üóëÔ∏è Limpiar Log", 
                  command=self.clear_log).pack(side=tk.LEFT, padx=5)
        
        ttk.Button(control_frame, text="üíæ Guardar Config", 
                  command=self.save_config).pack(side=tk.RIGHT, padx=5)
    
    def browse_directory(self):
        """Abre un di√°logo para seleccionar el directorio de Endless Sky"""
        directory = filedialog.askdirectory(
            title="Seleccionar directorio de Endless Sky",
            initialdir=self.endless_sky_path.get() if self.endless_sky_path.get() else "C:\\"
        )
        if directory:
            self.endless_sky_path.set(directory)
            self.scan_translatable_items()
    
    def get_file_safety_info(self, filename):
        """Determina la informaci√≥n de seguridad de un archivo"""
        filename_lower = filename.lower()
        
        # Archivos completamente seguros (verde)
        safe_patterns = ['mission', 'conversation', 'dialog', 'hail', 'job', 'news', 'event', 'campaign', 'start', 'culture', 'help', 'boarding', 'names', 'phrase']
        if any(pattern in filename_lower for pattern in safe_patterns):
            return ("‚úÖ", "green", "Completamente seguro")
        
        # Archivos especiales con l√≥gica particular (amarillo)
        special_files = ['ships.txt', 'outfits.txt', 'engines.txt', 'weapons.txt', 'power.txt', 'harvesting.txt', 'variants.txt']
        if filename_lower in special_files:
            return ("‚öôÔ∏è", "orange", "Solo descripciones")
        
        # Archivos ra√≠z especiales
        if filename_lower in ['map planets.txt', 'dialog phrases.txt', 'starts.txt', 'persons.txt']:
            return ("üåü", "blue", "Archivo especial")
        
        # Archivos de facciones con frases/nombres (tambi√©n seguros)
        if any(faction in filename_lower for faction in ['wanderers.txt', 'hai.txt', 'korath.txt']):
            return ("üë•", "cyan", "Nombres de facci√≥n")
        
        # Archivos espec√≠ficos de facciones seguros por patr√≥n
        safe_faction_patterns = ['prologue', 'epilogue', 'middle', 'checkmate', 'reconciliation', 'reactions', 'side plots', 'war jobs']
        if any(pattern in filename_lower for pattern in safe_faction_patterns):
            return ("üìñ", "green", "Historia/campa√±as")
        
        # Archivos de trabajos por ubicaci√≥n
        location_patterns = ['north', 'south', 'earth', 'belt', 'frontier', 'rim', 'paradise', 'syndicate', 'pirate', 'deep']
        if any(pattern in filename_lower for pattern in location_patterns) and 'job' in filename_lower:
            return ("üíº", "blue", "Trabajos por regi√≥n")
        
        # Archivos de personajes (frases traducibles)
        if filename_lower == 'persons.txt':
            return ("üë§", "purple", "Frases de personajes")
        
        # Por defecto, revisar
        return ("‚ö†Ô∏è", "gray", "Requiere revisi√≥n")
    
    def is_file_translatable(self, filepath):
        """Determina si un archivo realmente debe mostrarse como traducible"""
        filename = filepath.name.lower()
        
        # Lista espec√≠fica de archivos que NUNCA deben aparecer
        excluded_files = [
            'fleets.txt', 'governments.txt', 'systems.txt', 'planets.txt',
            'map systems.txt', 'commodities.txt',
            'effects.txt', 'hazards.txt', 'formations.txt', 'stars.txt', 'series.txt',
            'derelicts.txt', 'minables.txt', 'wormhole.txt',
            'globals.txt', 'gamerules.txt', 'categories.txt',
            'map beyond patir.txt'
        ]
        
        if filename in excluded_files:
            return False
        
        # Patrones que NUNCA deben aparecer (pero no 'variant' porque algunos archivos variant son √∫tiles)
        excluded_patterns = ['derelict', 'formation', 'hazard', 'fleet', 'government', 'system', 'rating', 'swizzle']
        if any(pattern in filename for pattern in excluded_patterns):
            # Excepci√≥n: si contiene ship, outfit, weapon, engine, harvesting s√≠ queremos incluirlo
            equipment_exceptions = ['ship', 'outfit', 'weapon', 'engine', 'power', 'harvesting']
            if not any(eq in filename for eq in equipment_exceptions):
                return False
        
        # Archivos que S√ç queremos mostrar (contenido seguro)
        safe_patterns = ['mission', 'conversation', 'dialog', 'hail', 'job', 'news', 'event', 'campaign', 'culture', 'intro', 'side', 'start', 'harvesting', 'persons', 'help', 'boarding', 'names', 'phrase']
        if any(pattern in filename for pattern in safe_patterns):
            return True
        
        # Archivos de equipamiento que S√ç queremos (contienen descripciones traducibles)
        equipment_patterns = ['ship', 'outfit', 'weapon', 'engine', 'power']
        if any(pattern in filename for pattern in equipment_patterns):
            return True
        
        # Archivos ra√≠z permitidos especiales
        root_files = ['map planets.txt', 'dialog phrases.txt', 'starts.txt', 'harvesting.txt', 'persons.txt']
        if filename in root_files:
            return True
        
        # Archivos UI permitidos
        ui_patterns = ['interface', 'tooltip', 'help', 'landing', 'flight']
        if any(pattern in filename for pattern in ui_patterns):
            return True
        
        # Archivos de trabajos por ubicaci√≥n geogr√°fica
        location_patterns = ['north', 'south', 'earth', 'belt', 'frontier', 'rim', 'paradise', 'syndicate', 'pirate', 'deep']
        if any(pattern in filename for pattern in location_patterns) and 'job' in filename:
            return True
        
        # Archivos espec√≠ficos de facciones que tambi√©n queremos
        faction_patterns = ['sales', 'boarding', 'marauder', 'kestrel', 'name', 'critter', 'elenchus', 'nanobots', 'windjammer', 'indigenous', 'archaeology', 'tace mesa', 'variant', 'prologue', 'epilogue', 'middle', 'checkmate', 'reconciliation', 'reactions', 'plots', 'reveal', 'war', 'reveal']
        if any(pattern in filename for pattern in faction_patterns):
            return True
        
        # Archivos que terminan en n√∫meros seguidos de palabras (ej: "hai reveal 1 intro.txt")
        import re
        if re.search(r'\d+\s+\w+\.txt$', filename):
            return True
        
        # Archivos con nombres de facciones espec√≠ficas
        faction_names = ['hai', 'korath', 'wanderer', 'remnant', 'pug', 'quarg', 'coalition', 'avgi', 'bunrodea', 'drak', 'gegno', 'iije', 'incipias', 'kahet', 'rulei', 'sheragi', 'successor', 'vyrmeid', 'aberrant', 'unfettered', 'heliarch', 'lunarium', 'wanderers']
        if any(faction in filename for faction in faction_names):
            return True
        
        # Si llegamos aqu√≠, probablemente no es seguro mostrar el archivo
        return False
    
    def scan_translatable_items(self):
        """Scans and creates expandable structure with folders and individual files"""
        # Clear current structure
        for widget in self.main_scrollable_frame.winfo_children():
            widget.destroy()
        
        self.all_items.clear()
        
        base_path = self.endless_sky_path.get()
        if not base_path or not os.path.exists(base_path):
            self.selection_info.config(text="‚ö†Ô∏è Select a valid Endless Sky directory", fg="red")
            return
        
        data_path = Path(base_path) / "data"
        if not data_path.exists():
            self.selection_info.config(text="‚ùå 'data' folder not found in directory", fg="red")
            return
        
        total_items = 0
        
        # 1. Create root files section
        root_section = ttk.LabelFrame(self.main_scrollable_frame, text="üìÅ Root Files", padding=5)
        root_section.pack(fill=tk.X, padx=5, pady=2)
        
        # Scan ALL .txt files in data root directory
        root_files = []
        for file_path in data_path.glob("*.txt"):
            if self.is_file_translatable(file_path):
                root_files.append(file_path.name)
        
        for filename in sorted(root_files):
            file_path = data_path / filename
            if file_path.exists():
                safety_icon, color, description = self.get_file_safety_info(filename)
                item = FileItem(filename, file_path, 'file', safety_icon, True)
                self.all_items.append(item)
                self.create_file_checkbox_in_frame(root_section, item, color, description)
                total_items += 1
        
        # 2. Scan ALL subdirectories dynamically
        for folder_path in sorted(data_path.iterdir()):
            if folder_path.is_dir() and not folder_path.name.startswith('.'):
                # Scan translatable files in the folder
                translatable_files = []
                for file_path in folder_path.glob("*.txt"):
                    if self.is_file_translatable(file_path):
                        translatable_files.append(file_path.name)
                
                if translatable_files:  # Only create section if there are translatable files
                    folder_item = FileItem(folder_path.name, folder_path, 'folder', self.get_folder_status(folder_path.name))
                    folder_item.files = translatable_files
                    self.all_items.append(folder_item)
                    
                    # Create expandable section for the folder
                    self.create_folder_section(folder_item, folder_path)
                    total_items += 1 + len(translatable_files)
        
        # Update selection information
        self.selection_info.config(
            text=f"‚úÖ Found {total_items} translatable elements (folders and individual files)",
            fg="green"
        )
        
        if total_items == 0:
            self.selection_info.config(text="‚ö†Ô∏è No translatable files found in this directory", fg="orange")
    
    def create_folder_section(self, folder_item, folder_path):
        """Crea una secci√≥n expandible para una carpeta"""
        # Frame principal de la carpeta
        folder_frame = ttk.LabelFrame(self.main_scrollable_frame, 
                                     text=f"üìÇ {folder_item.name} ({len(folder_item.files)} archivos)", 
                                     padding=5)
        folder_frame.pack(fill=tk.X, padx=5, pady=2)
        
        # Frame superior con checkbox de carpeta y bot√≥n expandir
        header_frame = ttk.Frame(folder_frame)
        header_frame.pack(fill=tk.X)
        
        # Checkbox principal de la carpeta
        folder_checkbox = ttk.Checkbutton(
            header_frame,
            text=f"{folder_item.status} Seleccionar toda la carpeta",
            variable=folder_item.selected,
            command=lambda: self.on_folder_toggle(folder_item)
        )
        folder_checkbox.pack(side=tk.LEFT)
        
        # Bot√≥n para expandir/contraer
        expand_button = ttk.Button(
            header_frame,
            text="üìÇ Expandir",
            command=lambda: self.toggle_folder_expansion(folder_item, files_frame, expand_button)
        )
        expand_button.pack(side=tk.RIGHT)
        
        # Frame para archivos (inicialmente oculto)
        files_frame = ttk.Frame(folder_frame)
        # No hacer pack() todav√≠a - se hace en toggle_folder_expansion
        
        # Crear checkboxes de archivos individuales
        folder_item.file_objects = []  # Lista de objetos FileItem
        for filename in folder_item.files:
            file_path = folder_path / filename
            safety_icon, color, description = self.get_file_safety_info(filename)
            file_item = FileItem(filename, file_path, 'file', safety_icon, True, parent=folder_item)
            folder_item.file_objects.append(file_item)
            self.all_items.append(file_item)
            
            self.create_file_checkbox_in_frame(files_frame, file_item, color, description, indent=True)
        
        # Guardar referencias para la expansi√≥n
        folder_item.files_frame = files_frame
        folder_item.expand_button = expand_button
    
    def create_file_checkbox_in_frame(self, parent_frame, item, color, description, indent=False):
        """Crea un checkbox para un archivo en el frame especificado"""
        file_frame = ttk.Frame(parent_frame)
        file_frame.pack(fill=tk.X, padx=(20 if indent else 0, 0), pady=1)
        
        # Checkbox con color
        checkbox = ttk.Checkbutton(
            file_frame,
            text=f"{item.status} {item.name}",
            variable=item.selected,
            command=lambda: self.on_file_toggle(item)
        )
        checkbox.pack(anchor=tk.W)
        
        # Label con descripci√≥n
        desc_label = tk.Label(file_frame, text=f"  ‚îî‚îÄ {description}", font=("Arial", 8), fg=color)
        desc_label.pack(anchor=tk.W)
        
        # Tooltip con informaci√≥n
        self.create_tooltip(checkbox, f"Archivo: {item.name}\\nTipo: {description}\\nSeguridad: {item.status}")
    
    def toggle_folder_expansion(self, folder_item, files_frame, expand_button):
        """Alterna la expansi√≥n de una carpeta"""
        if folder_item.expanded:
            # Contraer
            files_frame.pack_forget()
            expand_button.config(text="üìÇ Expandir")
            folder_item.expanded = False
        else:
            # Expandir
            files_frame.pack(fill=tk.X, pady=(5, 0))
            expand_button.config(text="üìÅ Contraer")
            folder_item.expanded = True
    
    def expand_all_folders(self):
        """Expande todas las carpetas"""
        for item in self.all_items:
            if item.item_type == 'folder' and hasattr(item, 'files_frame'):
                if not item.expanded:
                    self.toggle_folder_expansion(item, item.files_frame, item.expand_button)
    
    def collapse_all_folders(self):
        """Contrae todas las carpetas"""
        for item in self.all_items:
            if item.item_type == 'folder' and hasattr(item, 'files_frame'):
                if item.expanded:
                    self.toggle_folder_expansion(item, item.files_frame, item.expand_button)
    
    def on_folder_toggle(self, folder_item):
        """Maneja el toggle de una carpeta (seleccionar/deseleccionar todos sus archivos)"""
        folder_selected = folder_item.selected.get()
        
        # Seleccionar/deseleccionar todos los archivos de la carpeta
        if hasattr(folder_item, 'file_objects'):
            for file_item in folder_item.file_objects:
                file_item.selected.set(folder_selected)
        
        self.update_selection_count()
    
    def on_file_toggle(self, file_item):
        """Maneja el toggle de un archivo individual"""
        # Si el archivo tiene una carpeta padre, verificar si todos los archivos est√°n seleccionados
        if hasattr(file_item, 'parent') and file_item.parent and hasattr(file_item.parent, 'file_objects'):
            parent = file_item.parent
            all_files_selected = True
            any_file_selected = False
            
            for file_obj in parent.file_objects:
                if file_obj.selected.get():
                    any_file_selected = True
                else:
                    all_files_selected = False
            
            # Actualizar el estado del checkbox de la carpeta
            if all_files_selected:
                parent.selected.set(True)
            elif not any_file_selected:
                parent.selected.set(False)
            # Si algunos est√°n seleccionados pero no todos, dejar el estado actual
        
        self.update_selection_count()
    
    def update_selection_count(self):
        """Actualiza el contador de elementos seleccionados"""
        selected_folders = sum(1 for item in self.all_items if item.item_type == 'folder' and item.selected.get())
        selected_files = sum(1 for item in self.all_items if item.item_type == 'file' and item.selected.get())
        total_selected = selected_folders + selected_files
        
        if total_selected > 0:
            self.selection_info.config(
                text=f"‚òëÔ∏è Seleccionados: {selected_folders} carpetas y {selected_files} archivos ({total_selected} total)",
                fg="blue"
            )
        else:
            total_items = len(self.all_items)
            self.selection_info.config(
                text=f"‚òê Ning√∫n elemento seleccionado ({total_items} disponibles)",
                fg="gray"
            )
    
    def select_all(self):
        """Selecciona todos los elementos"""
        for item in self.all_items:
            item.selected.set(True)
        self.update_selection_count()
    
    def deselect_all(self):
        """Deselecciona todos los elementos"""
        for item in self.all_items:
            item.selected.set(False)
        self.update_selection_count()
    
    def select_safe_only(self):
        """Selecciona solo elementos completamente seguros"""
        for item in self.all_items:
            # Solo seleccionar los que tienen indicador verde (‚úÖ)
            if item.status == "‚úÖ":
                item.selected.set(True)
            else:
                item.selected.set(False)
        self.update_selection_count()
    
    def select_with_special(self):
        """Selecciona elementos seguros y especiales"""
        for item in self.all_items:
            # Seleccionar verdes (‚úÖ) y especiales (‚öôÔ∏è, üåü)
            if item.status in ["‚úÖ", "‚öôÔ∏è", "üåü"]:
                item.selected.set(True)
            else:
                item.selected.set(False)
        self.update_selection_count()
    
    def start_translation(self):
        """Inicia el proceso de traducci√≥n"""
        if self.is_translating:
            return
        
        base_path = self.endless_sky_path.get()
        if not base_path or not os.path.exists(base_path):
            messagebox.showerror("Error", "Por favor selecciona un directorio v√°lido de Endless Sky")
            return
        
        # Obtener elementos seleccionados
        selected_folders = []
        selected_files = []
        
        for item in self.all_items:
            if item.selected.get():
                if item.item_type == 'folder':
                    selected_folders.append(item.name)
                elif item.item_type == 'file':
                    # Para archivos individuales, verificar si son archivos ra√≠z o de carpeta
                    if hasattr(item, 'parent') and item.parent:
                        # Es un archivo dentro de una carpeta
                        # Solo agregarlo si la carpeta padre NO est√° seleccionada
                        if not item.parent.selected.get():
                            # Crear entrada especial para archivos individuales de carpetas
                            folder_file_key = f"{item.parent.name}/{item.name}"
                            selected_files.append(folder_file_key)
                    else:
                        # Es un archivo ra√≠z
                        selected_files.append(item.name)
        
        if not selected_folders and not selected_files:
            messagebox.showwarning("Advertencia", "Por favor selecciona al menos una carpeta o archivo para traducir")
            return
        
        # Confirmar traducci√≥n
        total_selected = len(selected_folders) + len(selected_files)
        confirm_msg = f"¬øIniciar traducci√≥n de {total_selected} elementos?\\n\\n"
        confirm_msg += f"Carpetas: {', '.join(selected_folders) if selected_folders else 'Ninguna'}\\n"
        confirm_msg += f"Archivos: {', '.join(selected_files) if selected_files else 'Ninguno'}"
        
        if not messagebox.askyesno("Confirmar Traducci√≥n", confirm_msg):
            return
        
        # Configurar UI para traducci√≥n
        self.is_translating = True
        self.start_button.config(state="disabled")
        self.stop_button.config(state="normal")
        self.status_label.config(text="üöÄ Iniciando traducci√≥n...", fg="orange")
        self.progress_bar.config(value=0)
        
        # Obtener idioma
        lang_selection = self.target_language.get()
        target_lang = lang_selection.split(' - ')[0] if ' - ' in lang_selection else 'es'
        
        # Limpiar log
        self.log_text.delete(1.0, tk.END)
        self.log_message_colored(f"üöÄ Iniciando traducci√≥n a {target_lang}")
        self.log_message_colored(f"üìÅ Directorio base: {base_path}")
        self.log_message_colored(f"üìÇ Carpetas seleccionadas: {selected_folders}")
        self.log_message_colored(f"üìÑ Archivos seleccionados: {selected_files}")
        
        # Debug: mostrar rutas completas para verificar
        for folder in selected_folders:
            folder_path = Path(base_path) / "data" / folder
            self.log_message_colored(f"üîç Carpeta a procesar: {folder_path} (existe: {folder_path.exists()})")
        
        for file_entry in selected_files:
            if "/" in file_entry:
                folder_name, filename = file_entry.split("/", 1)
                file_path = Path(base_path) / "data" / folder_name / filename
            else:
                file_path = Path(base_path) / "data" / file_entry
            self.log_message_colored(f"üîç Archivo a procesar: {file_path} (existe: {file_path.exists()})")
        
        # Iniciar traducci√≥n en hilo separado
        self.translation_thread = threading.Thread(
            target=self.run_translation,
            args=(base_path, target_lang, selected_folders, selected_files)
        )
        self.translation_thread.daemon = True
        self.translation_thread.start()
    
    def run_translation(self, base_path, target_lang, selected_folders, selected_files):
        """Ejecuta la traducci√≥n en un hilo separado"""
        try:
            # Crear instancia del traductor personalizada
            translator = CustomTranslatorImproved(base_path, target_lang, self.translation_queue)
            
            # Ejecutar traducci√≥n con selecciones espec√≠ficas
            translator.run_custom_translation(selected_folders, selected_files)
            
            self.translation_queue.put(("status", "‚úÖ Traducci√≥n completada exitosamente!", "green"))
            self.translation_queue.put(("progress", 100))
            
        except Exception as e:
            error_msg = f"‚ùå Error durante la traducci√≥n: {str(e)}"
            self.translation_queue.put(("status", error_msg, "red"))
            self.translation_queue.put(("log", error_msg))
        finally:
            self.translation_queue.put(("finished", None, None))
    
    def stop_translation(self):
        """Detiene la traducci√≥n"""
        if self.translation_thread and self.translation_thread.is_alive():
            self.log_message("‚èπÔ∏è Deteniendo traducci√≥n...")
        self.translation_finished()
    
    def translation_finished(self):
        """Limpia la UI cuando termina la traducci√≥n"""
        self.is_translating = False
        self.start_button.config(state="normal")
        self.stop_button.config(state="disabled")
    
    def check_queue(self):
        """Verifica la cola de mensajes del hilo de traducci√≥n"""
        try:
            while True:
                queue_item = self.translation_queue.get_nowait()
                
                # Verificar el formato del mensaje
                if len(queue_item) == 3:
                    msg_type, message, color = queue_item
                elif len(queue_item) == 2:
                    msg_type, message = queue_item
                    color = None
                else:
                    continue
                
                if msg_type == "log":
                    self.log_message_colored(message)
                elif msg_type == "status":
                    self.status_label.config(text=message, fg=color if color else "blue")
                elif msg_type == "progress":
                    self.progress_bar.config(value=message)
                elif msg_type == "finished":
                    self.translation_finished()
                    
        except queue.Empty:
            pass
        
        # Programar siguiente verificaci√≥n
        self.root.after(100, self.check_queue)
    
    def log_message(self, message):
        """A√±ade un mensaje al log sin formato"""
        self.log_text.insert(tk.END, f"{message}\n")
        self.log_text.see(tk.END)
        self.root.update_idletasks()
    
    def log_message_colored(self, message):
        """A√±ade un mensaje al log con colores seg√∫n el contenido"""
        # Configurar etiquetas de colores si no existen
        if not hasattr(self, 'log_colors_configured'):
            self.log_text.tag_configure("success", foreground="green")
            self.log_text.tag_configure("error", foreground="red")
            self.log_text.tag_configure("warning", foreground="orange")
            self.log_text.tag_configure("info", foreground="blue")
            self.log_text.tag_configure("processing", foreground="purple")
            self.log_colors_configured = True
        
        # Determinar color seg√∫n el contenido del mensaje
        color_tag = None
        if message.startswith("‚úÖ") or "l√≠neas traducidas" in message:
            color_tag = "success"
        elif message.startswith("‚ùå") or "Error" in message:
            color_tag = "error"
        elif message.startswith("‚ö†Ô∏è") or "Sin traducciones" in message:
            color_tag = "warning"
        elif message.startswith("üöÄ") or message.startswith("üîß") or message.startswith("üí°"):
            color_tag = "info"
        elif message.startswith("üìÑ") or message.startswith("üìÇ"):
            color_tag = "processing"
        
        # Insertar el mensaje con color
        start_pos = self.log_text.index(tk.END)
        self.log_text.insert(tk.END, f"{message}\n")
        
        if color_tag:
            end_pos = self.log_text.index(tk.END + "-1c")
            self.log_text.tag_add(color_tag, start_pos, end_pos)
        
        self.log_text.see(tk.END)
        self.root.update_idletasks()
    
    def clear_log(self):
        """Limpia el log"""
        self.log_text.delete(1.0, tk.END)
    
    def save_config(self):
        """Guarda la configuraci√≥n actual"""
        config = {
            'endless_sky_path': self.endless_sky_path.get(),
            'target_language': self.target_language.get()
        }
        
        try:
            with open(self.config_file, 'w') as f:
                json.dump(config, f, indent=2)
            messagebox.showinfo("√âxito", "Configuraci√≥n guardada correctamente")
        except Exception as e:
            messagebox.showerror("Error", f"Error al guardar configuraci√≥n: {e}")
    
    def load_config(self):
        """Carga la configuraci√≥n guardada"""
        try:
            if os.path.exists(self.config_file):
                with open(self.config_file, 'r') as f:
                    config = json.load(f)
                
                self.endless_sky_path.set(config.get('endless_sky_path', ''))
                self.target_language.set(config.get('target_language', 'es'))
        except Exception:
            # Si hay error cargando, usar valores por defecto
            pass
    
    def get_folder_status(self, folder_name):
        """Obtiene el estado de una carpeta"""
        safe_folders = ['human', 'hai', 'korath', 'wanderer', 'remnant', 'pug', 'quarg', 'coalition', '_ui']
        return "‚úÖ" if folder_name in safe_folders else "‚ö†Ô∏è"
    
    def create_tooltip(self, widget, text):
        """Crea un tooltip para un widget"""
        def show_tooltip(event):
            tooltip = tk.Toplevel()
            tooltip.wm_overrideredirect(True)
            tooltip.wm_geometry(f"+{event.x_root+10}+{event.y_root+10}")
            
            label = tk.Label(tooltip, text=text, background="lightyellow", 
                           relief="solid", borderwidth=1, font=("Arial", 9))
            label.pack()
            
            def hide_tooltip():
                tooltip.destroy()
            
            tooltip.after(3000, hide_tooltip)  # Auto-hide after 3 seconds
        
        widget.bind("<Enter>", show_tooltip)

    # ...existing code...
    
class CustomTranslatorImproved(EndlessSkyTranslatorFixed):
    """Traductor personalizado mejorado que env√≠a mensajes a la GUI"""
    
    def __init__(self, base_path, target_lang, message_queue):
        super().__init__(base_path, target_lang)
        self.message_queue = message_queue
    
    def log_message(self, message):
        """Env√≠a mensaje a la GUI"""
        self.message_queue.put(("log", message, None))
        print(message)  # Tambi√©n imprimir en consola
    
    def translate_text(self, text):
        """Traduce un texto usando Google Translate preservando TODOS los identificadores del juego"""
        if not text or len(text.strip()) < 2:
            return text
        
        try:
            clean_text = text.strip()
            if not clean_text:
                return text
            
            # PRESERVAR TODOS LOS ELEMENTOS ESPECIALES DEL JUEGO
            preservation_map = {}
            temp_text = clean_text
            placeholder_counter = 0
            
            # 1. Variables del juego como <planet>, <origin>, <destination>, <tons>, etc.
            # IMPORTANTE: Preservar TODAS las etiquetas entre < >
            game_variables = re.findall(r'<[^>]+>', temp_text)
            if game_variables:
                self.log_message(f"    üîí Preservando {len(game_variables)} etiqueta(s): {game_variables}")
            for var in game_variables:
                placeholder = f"__GAMEVAR_{placeholder_counter}__"
                preservation_map[placeholder] = var
                temp_text = temp_text.replace(var, placeholder)
                placeholder_counter += 1
            
            # 2. N√∫meros con unidades del juego como "5000 credits", "10 tons", "3 jumps"
            game_units_pattern = r'\b\d+(?:[.,]\d+)?\s*(?:credits?|tons?|jumps?|days?|units?|MW|GW|kW|km|m)\b'
            game_units = re.findall(game_units_pattern, temp_text, re.IGNORECASE)
            for unit in game_units:
                placeholder = f"__GAMEUNIT_{placeholder_counter}__"
                preservation_map[placeholder] = unit
                temp_text = temp_text.replace(unit, placeholder)
                placeholder_counter += 1
            
            # 3. Coordenadas y n√∫meros t√©cnicos como "150.5 -200.3"
            coordinates_pattern = r'\b-?\d+(?:\.\d+)?\s+-?\d+(?:\.\d+)?\b'
            coordinates = re.findall(coordinates_pattern, temp_text)
            for coord in coordinates:
                placeholder = f"__COORD_{placeholder_counter}__"
                preservation_map[placeholder] = coord
                temp_text = temp_text.replace(coord, placeholder)
                placeholder_counter += 1
            
            # 4. Nombres propios entre comillas (naves, outfits, sistemas)
            quoted_names = re.findall(r'"[A-Z][^"]*"', temp_text)
            for name in quoted_names:
                placeholder = f"__QUOTEDNAME_{placeholder_counter}__"
                preservation_map[placeholder] = name
                temp_text = temp_text.replace(name, placeholder)
                placeholder_counter += 1
            
            # 5. Preservar guiones bajos al inicio (indicadores de teclas de acceso r√°pido)
            underscore_prefix = ""
            if temp_text.startswith('_'):
                underscore_prefix = "_"
                temp_text = temp_text[1:]
            
            # 6. Preservar puntos suspensivos
            ellipsis_suffix = ""
            if temp_text.endswith('...'):
                ellipsis_suffix = "..."
                temp_text = temp_text[:-3]
            
            # 7. Preservar archivos y extensiones
            file_extensions = re.findall(r'\b\w+\.\w+\b', temp_text)
            for file_ext in file_extensions:
                placeholder = f"__FILE_{placeholder_counter}__"
                preservation_map[placeholder] = file_ext
                temp_text = temp_text.replace(file_ext, placeholder)
                placeholder_counter += 1
            
            # No traducir si queda muy poco texto despu√©s de preservar elementos
            if len(temp_text.strip()) < 3:
                return text
            
            self.log_message(f"    üåç Traduciendo: '{temp_text[:50]}{'...' if len(temp_text) > 50 else ''}'")
            time.sleep(0.1)
            
            translated = self.translator.translate(temp_text, dest=self.target_lang)
            result_text = translated.text if hasattr(translated, 'text') else str(translated)
            
            # RESTAURAR TODOS LOS ELEMENTOS PRESERVADOS
            tags_restored = 0
            for placeholder, original_value in preservation_map.items():
                # Buscar tanto el placeholder original como en min√∫sculas (Google Translate los convierte)
                placeholder_lower = placeholder.lower()
                if placeholder in result_text:
                    result_text = result_text.replace(placeholder, original_value)
                    tags_restored += 1
                elif placeholder_lower in result_text:
                    result_text = result_text.replace(placeholder_lower, original_value)
                    tags_restored += 1
            
            # Verificaci√≥n adicional: asegurar que no queden placeholders sin restaurar
            remaining_placeholders = re.findall(r'__[a-zA-Z]+_\d+__', result_text)
            if remaining_placeholders:
                # Intentar restaurar manualmente con b√∫squeda insensible a may√∫sculas
                for placeholder in remaining_placeholders:
                    # Buscar placeholder original correspondiente
                    for orig_placeholder, orig_value in preservation_map.items():
                        if orig_placeholder.lower() == placeholder.lower():
                            result_text = result_text.replace(placeholder, orig_value)
                            tags_restored += 1
                            break
            
            # Mostrar resultado de restauraci√≥n si hay etiquetas
            if preservation_map:
                final_tags = re.findall(r'<[^>]*>', result_text)
                if final_tags:
                    self.log_message(f"    ‚úÖ {len(final_tags)} etiqueta(s) preservada(s): {final_tags}")
                else:
                    self.log_message(f"    ‚ö†Ô∏è Se perdieron algunas etiquetas durante la traducci√≥n")
            
            # Normalizar el texto para el juego (eliminar tildes)
            result_text = self.normalize_text_for_game(result_text)
            
            # Restaurar elementos especiales
            final_text = underscore_prefix + result_text + ellipsis_suffix
            
            self.log_message(f"    ‚úÖ Resultado: '{final_text[:50]}{'...' if len(final_text) > 50 else ''}'")
            return final_text
            
        except Exception as e:
            self.log_message(f"    ‚ùå Error traduciendo '{text[:30]}...': {e}")
            return text
    
    def translate_map_planets_file(self, source_file, dest_file):
        """Sobrescribir para redirigir logs a GUI"""
        import time
        
        self.log_message(f"\nüåç Procesando archivo de planetas: {source_file.name}")
        
        # Asegurar que el directorio de destino existe
        dest_file.parent.mkdir(parents=True, exist_ok=True)
        
        # Detectar codificaci√≥n
        encoding = self.detect_encoding(source_file)
        self.log_message(f"   üî§ Codificaci√≥n: {encoding}")
        
        try:
            with open(source_file, 'r', encoding=encoding) as f:
                lines = f.readlines()
        except UnicodeDecodeError:
            self.log_message(f"   ‚ö†Ô∏è Error con {encoding}, usando UTF-8...")
            encoding = 'utf-8'
            with open(source_file, 'r', encoding=encoding, errors='ignore') as f:
                lines = f.readlines()
        
        self.log_message(f"   üìä Total de l√≠neas: {len(lines)}")
        
        translated_lines = []
        current_planet = None
        in_planet_block = False
        translations_made = 0
        
        for i, line in enumerate(lines):
            # Mostrar progreso cada 20 l√≠neas
            if i % 20 == 0:
                self.log_message(f"   üìà Progreso planetas: {i}/{len(lines)} l√≠neas...")
            
            line_stripped = line.strip()
            
            if i < 10 or line_stripped.startswith('planet') or 'description' in line_stripped.lower() or i % 50 == 0:
                self.log_message(f"    üìç L√çNEA {i+1}: Analizando: '{line_stripped[:80]}{'...' if len(line_stripped) > 80 else ''}'")
            
            # Detectar definici√≥n de planeta
            planet_match = re.match(r'^planet\s+"([^"]*)"', line_stripped)
            if planet_match:
                current_planet = planet_match.group(1)
                in_planet_block = True
                self.log_message(f"  ü™ê L√çNEA {i+1}: Procesando planeta: {current_planet}")
                translated_lines.append(line)
                continue
            
            # Verificar si es comentario o fin de bloque
            if line_stripped.startswith('#') or line_stripped == '':
                if in_planet_block:
                    self.log_message(f"    üìç L√çNEA {i+1}: {'Fin de bloque de planeta' if not in_planet_block else 'Comentario en planeta'}")
                translated_lines.append(line)
                continue
                
            # Detectar nueva definici√≥n (fin del bloque anterior)
            if re.match(r'^(ship|outfit|planet|system|government|event)\s+', line_stripped):
                self.log_message(f"    üìç L√çNEA {i+1}: Fin de bloque de planeta - nueva definici√≥n")
                in_planet_block = False
                current_planet = None
                translated_lines.append(line)
                continue
            
            # Si estamos dentro de un bloque de planeta
            if in_planet_block and current_planet:
                self.log_message(f"    üî¨ L√çNEA {i+1}: Dentro del planeta {current_planet}")
                
                # Buscar description
                if line_stripped.startswith('description'):
                    self.log_message(f"    üéØ L√çNEA {i+1}: DETECTADA DESCRIPCI√ìN - verificando si termina en backtick...")
                    if line_stripped.endswith('`'):
                        self.log_message(f"    ‚úÖ L√çNEA {i+1}: DESCRIPCI√ìN V√ÅLIDA - extrayendo texto...")
                        
                        # Extraer el texto entre backticks
                        match = re.match(r'^(\s*description\s+`)(.*)`(\s*)$', line)
                        if match:
                            prefix, text_to_translate, suffix = match.groups()
                            self.log_message(f"    üìù L√çNEA {i+1}: ¬°TRADUCIENDO DESCRIPCI√ìN! de {current_planet}")
                            self.log_message(f"        Texto original: '{text_to_translate[:60]}{'...' if len(text_to_translate) > 60 else ''}'")
                            
                            try:
                                # Traducir usando el m√©todo de la clase base
                                translated_text = self.translate_text(text_to_translate)
                                if translated_text != text_to_translate:
                                    line = f"{prefix}{translated_text}`{suffix}\n"
                                    translations_made += 1
                                    self.log_message(f"    ‚úÖ L√çNEA {i+1}: Descripci√≥n traducida exitosamente!")
                                    self.log_message(f"        Resultado: '{translated_text[:60]}{'...' if len(translated_text) > 60 else ''}'")
                                
                            except Exception as e:
                                self.log_message(f"    ‚ùå L√çNEA {i+1}: Error traduciendo descripci√≥n: {e}")
                                # Mantener l√≠nea original en caso de error
                        else:
                            # La regex no coincide, mantener l√≠nea original
                            self.log_message(f"    ‚ùå L√çNEA {i+1}: DESCRIPCI√ìN no coincide con regex")
                    else:
                        # Description sin backtick al final, o l√≠nea incompleta
                        pass
            
            translated_lines.append(line)
        
        # Escribir archivo traducido
        with open(dest_file, 'w', encoding='utf-8') as f:
            f.writelines(translated_lines)
        
        self.log_message(f"‚úÖ Planetas completado: {translations_made} descripciones traducidas")
        return translations_made
    
    def translate_file(self, source_file, dest_file):
        """Sobrescribir para redirigir logs a GUI"""
        self.log_message(f"\nüìÑ Procesando archivo: {source_file.name}")
        
        # Determinar si necesita l√≥gica especial
        filename_lower = source_file.name.lower()
        
        if filename_lower == 'commodities.txt':
            self.log_message(f"   üéØ Aplicando l√≥gica especial para commodities")
            return self.translate_commodities_file(source_file, dest_file)
        elif filename_lower in ['ships.txt', 'outfits.txt', 'engines.txt', 'weapons.txt', 'power.txt']:
            self.log_message(f"   üéØ Aplicando l√≥gica especial para ships/outfits/engines")
            return self.translate_ships_outfits_file(source_file, dest_file)
        
        # L√≥gica general para otros archivos
        # Crear directorio de destino
        dest_file.parent.mkdir(parents=True, exist_ok=True)
        
        # Detectar codificaci√≥n
        encoding = self.detect_encoding(source_file)
        self.log_message(f"   üî§ Codificaci√≥n: {encoding}")
        
        try:
            with open(source_file, 'r', encoding=encoding, errors='ignore') as f:
                lines = f.readlines()
        except:
            self.log_message(f"   ‚ö†Ô∏è Error con {encoding}, usando UTF-8...")
            with open(source_file, 'r', encoding='utf-8', errors='ignore') as f:
                lines = f.readlines()
        
        self.log_message(f"   üìä Total de l√≠neas: {len(lines)}")
        translated_lines = []
        lines_translated = 0
        lines_skipped = 0
        
        for i, line in enumerate(lines):
            if i % 100 == 0 and i > 0:
                self.log_message(f"   üìà Progreso: {i}/{len(lines)} l√≠neas...")
                
            translated_line, was_translated = self.translate_line(line)
            
            if was_translated:
                lines_translated += 1
                self.log_message(f"  ‚úÖ L√≠nea {i+1} traducida")
            else:
                lines_skipped += 1
            
            translated_lines.append(translated_line)
        
        # Solo crear archivo si hay traducciones
        if lines_translated > 0:
            self.log_message(f"   üíæ Guardando archivo con {lines_translated} l√≠neas traducidas...")
            # Guardar con codificaci√≥n UTF-8 y BOM para m√°xima compatibilidad
            with open(dest_file, 'w', encoding='utf-8-sig') as f:
                f.writelines(translated_lines)
            self.log_message(f"   ‚úÖ Archivo guardado: {dest_file}")
        else:
            self.log_message(f"   ‚è≠Ô∏è  Sin traducciones, archivo omitido")
        
        return lines_translated

    def translate_line(self, line):
        """Sobrescribir para redirigir logs a GUI"""
        original_line = line
        line_stripped = line.strip()
        
        # Verificar si la l√≠nea nunca debe traducirse
        if self.should_never_translate_line(line):
            return line, False
        
        # Extraer texto traducible
        result = self.extract_translatable_text(line)
        if result is None:
            return line, False
        
        prefix, text_to_translate, suffix, text_type = result
        
        if not text_to_translate or len(text_to_translate.strip()) < 2:
            return line, False
        
        # Traducir el texto
        translated_text = self.translate_text(text_to_translate)
        if translated_text == text_to_translate:
            return line, False  # No se tradujo
        
        # Reconstruir la l√≠nea seg√∫n el tipo
        if text_type == 'backtick':
            # Para texto entre backticks
            new_line = f"{prefix}`{translated_text}`{suffix}\n"
        elif text_type == 'description':
            # Para descripciones en comillas, reemplazar solo el contenido
            new_line = line.replace(f'"{text_to_translate}"', f'"{translated_text}"')
        else:
            # Fallback
            new_line = line.replace(text_to_translate, translated_text)
        
        return new_line, True
    
    def run_custom_translation(self, selected_folders, selected_files):
        """Ejecuta traducci√≥n personalizada basada en selecciones"""
        self.log_message("=== Traductor Mejorado de Endless Sky ===")
        self.log_message(f"Idioma destino: {self.target_lang}")
        
        # Crear estructura del plugin
        self.create_plugin_structure()
        self.log_message(f"üîß Plugin creado en: {self.plugin_path}")
        
        total_files_processed = 0
        progress_step = 0
        total_steps = len(selected_folders) + len(selected_files)
        
        # Procesar archivos individuales seleccionados
        for file_entry in selected_files:
            progress_step += 1
            progress = (progress_step / total_steps) * 100 if total_steps > 0 else 0
            self.message_queue.put(("progress", progress))
            
            # Verificar si es archivo ra√≠z o archivo de carpeta
            if "/" in file_entry:
                # Es archivo dentro de carpeta: "carpeta/archivo.txt"
                folder_name, filename = file_entry.split("/", 1)
                source_file = self.data_path / folder_name / filename
                dest_file = self.plugin_data_path / folder_name / filename
                
                # Crear directorio de carpeta si no existe
                dest_file.parent.mkdir(parents=True, exist_ok=True)
            else:
                # Es archivo ra√≠z
                filename = file_entry
                source_file = self.data_path / filename
                dest_file = self.plugin_data_path / filename
            
            if source_file.exists():
                self.log_message(f"\nüìÑ Procesando archivo: {source_file.name}")
                lines_translated = self.translate_file(source_file, dest_file)
                if lines_translated > 0:
                    total_files_processed += 1
                    self.log_message(f"‚úÖ {source_file.name}: {lines_translated} l√≠neas traducidas")
                else:
                    self.log_message(f"‚è≠Ô∏è {source_file.name}: Sin traducciones")
            else:
                self.log_message(f"‚ùå Archivo no encontrado: {source_file}")
        
        # Procesar carpetas seleccionadas
        for folder_name in selected_folders:
            progress_step += 1
            progress = (progress_step / total_steps) * 100 if total_steps > 0 else 0
            self.message_queue.put(("progress", progress))
            
            source_folder = self.data_path / folder_name
            dest_folder = self.plugin_data_path / folder_name
            
            if source_folder.exists():
                self.log_message(f"\nüìÇ Procesando carpeta: {folder_name}")
                files_in_folder = self.translate_folder_selective(source_folder, dest_folder)
                total_files_processed += files_in_folder
                self.log_message(f"‚úÖ Carpeta {folder_name}: {files_in_folder} archivos procesados")
            else:
                self.log_message(f"‚ùå Carpeta no encontrada: {folder_name}")
        
        self.log_message(f"\n‚úÖ Traducci√≥n completada!")
        self.log_message(f"üìä {total_files_processed} archivos procesados en total")
        
        if total_files_processed > 0:
            self.log_message(f"\nüí° Para usar la traducci√≥n:")
            self.log_message(f"   1. Inicia Endless Sky")
            self.log_message(f"   2. Ve a Preferencias ‚Üí Plugins")
            self.log_message(f"   3. Activa 'Traducci√≥n al Espa√±ol'")
            self.log_message(f"   4. Reinicia el juego")
        else:
            self.log_message(f"\n‚ö†Ô∏è No se procesaron archivos. Verifica tu selecci√≥n.")
    
    def translate_folder_selective(self, source_folder, dest_folder):
        """Traduce una carpeta usando solo archivos seguros"""
        files_processed = 0
        
        # Crear carpeta de destino
        dest_folder.mkdir(parents=True, exist_ok=True)
        
        # Buscar archivos .txt en la carpeta
        for file_path in source_folder.glob("*.txt"):
            if self.is_file_safe_for_gui(file_path):
                dest_file = dest_folder / file_path.name
                lines_translated = self.translate_file(file_path, dest_file)
                if lines_translated > 0:
                    files_processed += 1
                    self.log_message(f"  ‚úÖ {file_path.name}: {lines_translated} l√≠neas")
                else:
                    self.log_message(f"  ‚è≠Ô∏è {file_path.name}: Sin traducciones")
            else:
                self.log_message(f"  ‚è≠Ô∏è {file_path.name}: Archivo omitido (no seguro)")
        
        return files_processed
    
    def is_file_safe_for_gui(self, file_path):
        """Versi√≥n de seguridad para GUI que coincide con el filtro de archivos"""
        filename = file_path.name.lower()
        
        # Lista espec√≠fica de archivos que NUNCA deben procesarse
        excluded_files = [
            'fleets.txt', 'governments.txt', 'systems.txt', 'planets.txt',
            'map systems.txt', 'commodities.txt', 'variants.txt', 'persons.txt',
            'effects.txt', 'hazards.txt', 'formations.txt', 'stars.txt', 'series.txt',
            'derelicts.txt', 'minables.txt', 'start.txt', 'wormhole.txt'
        ]
        
        if filename in excluded_files:
            return False
        
        # Patrones que NUNCA deben procesarse
        excluded_patterns = ['derelict', 'variant', 'formation', 'hazard', 'fleet', 'government', 'system']
        if any(pattern in filename for pattern in excluded_patterns):
            return False
        
        # Archivos que S√ç queremos procesar
        safe_patterns = ['mission', 'conversation', 'dialog', 'hail', 'job', 'news', 'event', 'campaign']
        if any(pattern in filename for pattern in safe_patterns):
            return True
        
        # Archivos especiales que S√ç queremos (solo con l√≥gica especial)
        special_files = ['ships.txt', 'outfits.txt', 'engines.txt', 'weapons.txt', 'power.txt']
        if filename in special_files:
            return True
        
        # Si llegamos aqu√≠, probablemente no es seguro procesar el archivo
        return False

    def translate_commodities_file(self, source_file, dest_file):
        """Sobrescribir para redirigir logs a GUI"""
        self.log_message(f"\nüì¶ Procesando archivo de commodities: {source_file.name}")
        
        # Crear directorio de destino
        dest_file.parent.mkdir(parents=True, exist_ok=True)
        
        # Detectar codificaci√≥n
        encoding = self.detect_encoding(source_file)
        self.log_message(f"   üî§ Codificaci√≥n: {encoding}")
        
        try:
            with open(source_file, 'r', encoding=encoding, errors='ignore') as f:
                lines = f.readlines()
        except:
            self.log_message(f"   ‚ö†Ô∏è Error con {encoding}, usando UTF-8...")
            with open(source_file, 'r', encoding='utf-8', errors='ignore') as f:
                lines = f.readlines()
        
        self.log_message(f"   üìä Total de l√≠neas: {len(lines)}")
        translated_lines = []
        lines_translated = 0
        lines_skipped = 0
        in_commodity_block = False
        current_commodity = ""
        
        for i, line in enumerate(lines):
            if i % 500 == 0 and i > 0:
                self.log_message(f"   üìà Progreso commodities: {i}/{len(lines)} l√≠neas...")
            
            original_line = line
            line_stripped = line.strip()
            
            # Detectar inicio de bloque commodity
            commodity_match = re.match(r'^commodity\s+"([^"]*)"(?:\s+(\d+)\s+(\d+))?', line_stripped)
            if commodity_match:
                in_commodity_block = True
                commodity_name = commodity_match.group(1)
                current_commodity = f"commodity {commodity_name}"
                self.log_message(f"  üì¶ L√çNEA {i+1}: Detectado commodity: {commodity_name}")
                translated_lines.append(original_line)  # NO traducir nombres de commodities
                continue
            
            # Detectar fin de bloque
            if in_commodity_block and (not line_stripped or 
                                     line_stripped.startswith('#') or
                                     re.match(r'^(commodity|planet|ship|outfit|system)\s+', line_stripped)):
                in_commodity_block = False
                self.log_message(f"  üìç L√çNEA {i+1}: Fin de bloque commodity")
            
            # Si estamos en un bloque commodity
            if in_commodity_block:
                was_translated = False
                
                # Solo traducir elementos seguros dentro de commodities
                # Como descripci√≥n (pero no nombres ni valores)
                if line_stripped.startswith('description'):
                    desc_match = re.match(r'^(\s*description\s+)"(.+)"(.*)$', line.rstrip())
                    if desc_match:
                        prefix, description_text, suffix = desc_match.groups()
                        self.log_message(f"    üéØ L√çNEA {i+1}: DESCRIPCI√ìN COMMODITY - {current_commodity}")
                        try:
                            translated_text = self.translate_text(description_text)
                            if translated_text != description_text:
                                line = f'{prefix}"{translated_text}"{suffix}\n'
                                was_translated = True
                                lines_translated += 1
                                self.log_message(f"    ‚úÖ L√çNEA {i+1}: Descripci√≥n traducida!")
                        except Exception as e:
                            self.log_message(f"    ‚ùå L√çNEA {i+1}: Error: {e}")
                
                if was_translated:
                    translated_lines.append(line)
                else:
                    translated_lines.append(original_line)
                    lines_skipped += 1
            else:
                translated_lines.append(original_line)
                lines_skipped += 1
        
        # Solo guardar si hay traducciones
        if lines_translated > 0:
            self.log_message(f"   üíæ Guardando commodities con {lines_translated} l√≠neas traducidas...")
            with open(dest_file, 'w', encoding='utf-8-sig') as f:
                f.writelines(translated_lines)
            self.log_message(f"   ‚úÖ Commodities guardado: {dest_file}")
        else:
            self.log_message(f"   ‚è≠Ô∏è Sin traducciones en commodities, archivo omitido")
        
        return lines_translated

    def translate_ships_outfits_file(self, source_file, dest_file):
        """Traduce ships/outfits/engines FORZANDO SOBRESCRITURA COMPLETA"""
        self.log_message(f"\nüö¢ Procesando archivo de naves/outfits: {source_file.name}")
        
        # Crear directorio de destino
        dest_file.parent.mkdir(parents=True, exist_ok=True)
        
        # Detectar codificaci√≥n
        encoding = self.detect_encoding(source_file)
        self.log_message(f"   üî§ Codificaci√≥n: {encoding}")
        
        try:
            with open(source_file, 'r', encoding=encoding, errors='ignore') as f:
                lines = f.readlines()
        except:
            self.log_message(f"   ‚ö†Ô∏è Error con {encoding}, usando UTF-8...")
            with open(source_file, 'r', encoding='utf-8', errors='ignore') as f:
                lines = f.readlines()
        
        self.log_message(f"   üìä Total de l√≠neas: {len(lines)}")
        
        # *** NUEVA ESTRATEGIA: Solo guardar elementos que REALMENTE se traducen ***
        translated_items = []  # Lista de elementos traducidos completamente
        lines_translated = 0
        in_item_block = False
        current_item_lines = []
        current_item_name = ""
        current_item_type = ""
        current_indent = 0
        item_has_translations = False
        
        for i, line in enumerate(lines):
            if i % 100 == 0 and i > 0:
                self.log_message(f"   üìà Progreso naves/outfits: {i}/{len(lines)} l√≠neas...")
            
            original_line = line
            line_stripped = line.strip()
            
            # Saltar comentarios de copyright al inicio
            if line_stripped.startswith('#') and i < 20:
                continue
            
            # Detectar inicio de bloque de nave, outfit o effect
            item_match = re.match(r'^(ship|outfit|effect)\s+"?([^"]*)"?', line_stripped)
            if item_match:
                # Si est√°bamos procesando un item anterior y ten√≠a traducciones, guardarlo
                if in_item_block and item_has_translations and current_item_lines:
                    self.log_message(f"    üíæ Guardando {current_item_type} traducido: {current_item_name}")
                    translated_items.extend(current_item_lines)
                
                # Iniciar nuevo item
                in_item_block = True
                current_item_type, current_item_name = item_match.groups()
                current_indent = len(line) - len(line.lstrip())
                current_item_lines = [original_line]
                item_has_translations = False
                self.log_message(f"  üîß L√çNEA {i+1}: Procesando {current_item_type}: {current_item_name}")
                continue
            
            # Detectar fin de bloque
            if in_item_block:
                line_indent = len(line) - len(line.lstrip()) if line.strip() else 0
                
                # Si encontramos una nueva definici√≥n al mismo nivel, terminar bloque actual
                if (line_stripped and 
                    line_indent <= current_indent and 
                    any(line_stripped.startswith(kw) for kw in ['ship ', 'outfit ', 'effect ', 'planet ', 'system '])):
                    
                    # Guardar item anterior si ten√≠a traducciones
                    if item_has_translations and current_item_lines:
                        self.log_message(f"    ÔøΩ Guardando {current_item_type} traducido: {current_item_name}")
                        translated_items.extend(current_item_lines)
                    
                    in_item_block = False
                    current_item_lines = []
                    item_has_translations = False
                    
                    # Procesar esta l√≠nea como nueva definici√≥n
                    continue
                
                # Si es l√≠nea vac√≠a o comentario, a√±adir a las l√≠neas del item actual
                elif not line_stripped or line_stripped.startswith('#'):
                    current_item_lines.append(original_line)
                    continue
            
            # L√ìGICA DE REEMPLAZO: Si estamos en un bloque de item, traducir l√≠neas espec√≠ficas
            if in_item_block:
                translated_line = original_line  # Por defecto, mantener original
                was_translated = False
                
                # 1. DESCRIPCI√ìN: Reemplazar texto entre comillas
                description_match = re.match(r'^(\s*description\s+)"(.+)"(.*)$', line.rstrip())
                if description_match:
                    prefix, description_text, suffix = description_match.groups()
                    self.log_message(f"    üéØ L√çNEA {i+1}: DESCRIPCI√ìN DETECTADA en {current_item_type} {current_item_name}")
                    self.log_message(f"    üåç Traduciendo: '{description_text[:50]}{'...' if len(description_text) > 50 else ''}'")
                    try:
                        translated_text = self.translate_text(description_text)
                        if translated_text != description_text:
                            translated_line = f'{prefix}"{translated_text}"{suffix}\n'
                            was_translated = True
                            item_has_translations = True
                            lines_translated += 1
                            self.log_message(f"    ‚úÖ L√çNEA {i+1}: Descripci√≥n traducida correctamente")
                    except Exception as e:
                        self.log_message(f"    ‚ùå L√çNEA {i+1}: Error: {e}")
                
                # 2. PLURAL: Reemplazar nombres plurales
                elif re.match(r'^\s*plural\s+"(.+)"', line_stripped):
                    plural_match = re.match(r'^(\s*plural\s+)"(.+)"(.*)$', line.rstrip())
                    if plural_match:
                        prefix, plural_text, suffix = plural_match.groups()
                        self.log_message(f"    üéØ L√çNEA {i+1}: PLURAL DETECTADO en {current_item_type} {current_item_name}")
                        self.log_message(f"    üåç Traduciendo: '{plural_text}'")
                        try:
                            translated_text = self.translate_text(plural_text)
                            if translated_text != plural_text:
                                translated_line = f'{prefix}"{translated_text}"{suffix}\n'
                                was_translated = True
                                item_has_translations = True
                                lines_translated += 1
                                self.log_message(f"    ‚úÖ L√çNEA {i+1}: plural traducido correctamente")
                        except Exception as e:
                            self.log_message(f"    ‚ùå L√çNEA {i+1}: Error en plural: {e}")
                
                # 3. NOUN: Reemplazar sustantivos
                elif re.match(r'^\s*noun\s+"(.+)"', line_stripped):
                    noun_match = re.match(r'^(\s*noun\s+)"(.+)"(.*)$', line.rstrip())
                    if noun_match:
                        prefix, noun_text, suffix = noun_match.groups()
                        self.log_message(f"    üéØ L√çNEA {i+1}: SUSTANTIVO DETECTADO en {current_item_type} {current_item_name}")
                        self.log_message(f"    üåç Traduciendo: '{noun_text}'")
                        try:
                            translated_text = self.translate_text(noun_text)
                            if translated_text != noun_text:
                                translated_line = f'{prefix}"{translated_text}"{suffix}\n'
                                was_translated = True
                                item_has_translations = True
                                lines_translated += 1
                                self.log_message(f"    ‚úÖ L√çNEA {i+1}: sustantivo traducido correctamente")
                        except Exception as e:
                            self.log_message(f"    ‚ùå L√çNEA {i+1}: Error en sustantivo: {e}")
                
                # 4. EXPLANATION: Reemplazar explicaciones
                elif re.match(r'^\s*explanation\s+"(.+)"', line_stripped):
                    explanation_match = re.match(r'^(\s*explanation\s+)"(.+)"(.*)$', line.rstrip())
                    if explanation_match:
                        prefix, explanation_text, suffix = explanation_match.groups()
                        self.log_message(f"    üéØ L√çNEA {i+1}: EXPLICACI√ìN DETECTADA en {current_item_type} {current_item_name}")
                        self.log_message(f"    üåç Traduciendo: '{explanation_text[:50]}{'...' if len(explanation_text) > 50 else ''}'")
                        try:
                            translated_text = self.translate_text(explanation_text)
                            if translated_text != explanation_text:
                                translated_line = f'{prefix}"{translated_text}"{suffix}\n'
                                was_translated = True
                                item_has_translations = True
                                lines_translated += 1
                                self.log_message(f"    ‚úÖ L√çNEA {i+1}: explicaci√≥n traducida correctamente")
                        except Exception as e:
                            self.log_message(f"    ‚ùå L√çNEA {i+1}: Error en explicaci√≥n: {e}")
                
                # A√±adir la l√≠nea (original o traducida) al item actual
                current_item_lines.append(translated_line)
            else:
                # Fuera de bloque, ignorar l√≠neas
                pass
        
        # No olvidar el √∫ltimo item si ten√≠a traducciones
        if in_item_block and item_has_translations and current_item_lines:
            self.log_message(f"    üíæ Guardando √∫ltimo {current_item_type} traducido: {current_item_name}")
            translated_items.extend(current_item_lines)
        
        # Solo guardar archivo si hay elementos traducidos
        if translated_items:
            self.log_message(f"   üíæ Guardando archivo SOLO con elementos traducidos: {lines_translated} l√≠neas")
            
            # Crear contenido final con header y elementos traducidos
            final_content = []
            final_content.append("# Plugin translation - SOLO elementos traducidos para forzar sobrescritura\n")
            final_content.append("# Este archivo contiene √öNICAMENTE elementos con traducciones\n")
            final_content.append("\n")
            final_content.extend(translated_items)
            
            with open(dest_file, 'w', encoding='utf-8-sig') as f:
                f.writelines(final_content)
            self.log_message(f"   ‚úÖ Archivo ships/outfits guardado SOLO con traducciones: {dest_file}")
        else:
            self.log_message(f"   ‚è≠Ô∏è Sin traducciones encontradas, no se crea archivo")
        
        return lines_translated
def main():
    """Funci√≥n principal para ejecutar la GUI mejorada"""
    root = tk.Tk()
    
    # Configurar estilo
    style = ttk.Style()
    style.theme_use('clam')  # Usar tema m√°s moderno
    
    # Crear y ejecutar aplicaci√≥n
    app = TranslatorGUIImproved(root)
    
    try:
        root.mainloop()
    except KeyboardInterrupt:
        print("\\nSaliendo...")


if __name__ == "__main__":
    main()
